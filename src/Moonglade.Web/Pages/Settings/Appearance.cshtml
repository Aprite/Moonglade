@page "/admin/settings/appearance"
@using Moonglade.Data.Entities

@Html.AntiForgeryToken()
@section scripts {
    <partial name="_MonacoLoaderScript" />
    <script>
        var cssContentEditor = null;

        require(['vs/editor/editor.main'], function () {
            cssContentEditor = initEditor('CssContentEditor', "#ViewModel_CssCode", 'css');
        });
    </script>
    <script type="module">
        import * as settings from '/js/app/admin.settings.module.js';

        function handleSubmit(event) {
            assignEditorValues(cssContentEditor, "#ViewModel_CssCode");
            settings.handleSettingsSubmit(event);
        }

        var themeModal = new bootstrap.Modal(document.getElementById('thememodal'));
        window.createTheme = function (oFormElement) {
            callApi(oFormElement.action,
                'POST',
                {
                    name: document.querySelector('#Name').value,
                    accentColor1: document.querySelector('#AccentColor1').value,
                    accentColor2: document.querySelector('#AccentColor2').value,
                    accentColor3: document.querySelector('#AccentColor3').value
                },
                async (resp) => {
                    var id = await resp.json();

                    themeModal.hide();

                    var selectElement = document.getElementById('ViewModel_ThemeId');
                    var newOption = new Option(document.querySelector('#Name').value, id);
                    selectElement.appendChild(newOption);

                    blogToast.success('Theme created, refresh to see.');
                });
        }

        window.deleteTheme = function () {
            var selectedThemeId = document.querySelector('#ViewModel_ThemeId').value;
            callApi(`/api/theme/${selectedThemeId}`,
                'DELETE',
                {},
                (resp) => {
                    var selectElement = document.getElementById('ViewModel_ThemeId');
                    var optionToRemove = selectElement.querySelector(`option[value='${selectedThemeId}']`);
                    if (optionToRemove) {
                        selectElement.removeChild(optionToRemove);
                    }

                    blogToast.success('Theme deleted.');
                });
        }

        const form = document.querySelector('#form-settings');
        form.addEventListener('submit', handleSubmit);
    </script>
}

@section head {
    <style>
        .monaco-target {
            min-height: calc(100vh - 450px);
        }

        .theme-selector-container.active {
            border: 1px solid var(--accent-color1);
        }

        .theme-selector-footer {
            color: white;
        }

            .theme-selector-footer.active {
                font-weight: bold;
            }
    </style>
}

@section admintoolbar {
    <partial name="_SettingsHeader" />
}

<form id="form-settings" asp-controller="Settings" asp-action="Appearance">
    <div class="admin-settings-entry-container">
        <div class="row">
            <div class="col-md-6">
                <h4 class="admin-subtitle fw-bold mb-2">
                    @SharedLocalizer["Theme"]
                </h4>
                <div>
                    <div class="text-muted">@SharedLocalizer["System Themes"]</div>

                    <div class="row g-1">
                        @foreach (var theme in Themes.Where(p => p.ThemeType == ThemeType.System))
                        {
                            <div class="col-md-4">
                                <div class="theme-selector-container card @(ViewModel.ThemeId == theme.Id ? "active" : null)"
                                     style="border-color: @theme.CssRulesDictionary["--accent-color3"]"
                                     id="theme-selector-container-@theme.Id"
                                     data-theme-id="@theme.Id">
                                    <div class="card-body">
                                        <div>
                                            Color 1: @theme.CssRulesDictionary["--accent-color1"] <br />
                                            Color 2: @theme.CssRulesDictionary["--accent-color2"] <br />
                                            Color 3: @theme.CssRulesDictionary["--accent-color3"]
                                        </div>
                                    </div>

                                    <div class="card-footer theme-selector-footer @(ViewModel.ThemeId == theme.Id ? "active" : null)"
                                         style="background-color: @theme.CssRulesDictionary["--accent-color3"]">
                                        <input class="form-check-input" type="radio" asp-for="@ViewModel.ThemeId" id="ThemeId_@theme.Id" value="@theme.Id" />
                                        <label class="form-check-label" for="ThemeId_@theme.Id">@theme.ThemeName</label>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div>
                    <div class="row g-1 mb-2">
                        <div class="col">
                            @* <select class="form-select" asp-for="@ViewModel.ThemeId" asp-items="@ThemeList"></select> *@
                        </div>
                        <div class="col-auto">
                            <a class="btn btn-outline-accent" href="#" data-bs-toggle="modal" data-bs-target="#thememodal">
                                <i class="bi-palette"></i>
                                New
                            </a>
                            <a class="btn btn-outline-danger btn-delete-theme" href="javascript:deleteTheme();">
                                <i class="bi-trash"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <h4 class="admin-subtitle fw-bold mb-2">
                    @SharedLocalizer["Custom CSS"]
                </h4>

                <div class="settings-entry row align-items-center py-3 px-2 rounded-3 shadow-sm border mb-2">
                    <div class="col-auto">
                        <i class="bi-palette settings-entry-icon"></i>
                    </div>
                    <div class="col">
                        <label asp-for="@ViewModel.EnableCustomCss" class="form-check-label"></label>
                    </div>
                    <div class="col-md-5 text-end">
                        <div class="form-check form-switch form-control-lg">
                            <input type="hidden" name="EnableCustomCss" value="false">
                            <input type="checkbox" name="EnableCustomCss" value="true" class="form-check-input" @(@ViewModel.EnableCustomCss ? "checked" : null) />
                        </div>
                    </div>
                </div>

                <div id="CssContentEditor" class="monaco-target p-3 rounded-3 shadow-sm border">
                </div>
                <textarea asp-for="@ViewModel.CssCode" class="settings-csscontent-textarea d-none"></textarea>
            </div>
        </div>
    </div>

    <div class="admin-settings-action-container border-top pt-2 mt-2">
        <button type="submit" class="btn btn-outline-accent" id="btn-save-settings">
            @SharedLocalizer["Save"]
        </button>
    </div>
</form>

<partial name="_ThemeModal" model="ThemeRequest" />

@functions
{
    public AppearanceSettings ViewModel { get; set; }

    public CreateThemeRequest ThemeRequest { get; set; }

    public List<BlogThemeEntity> Themes { get; set; }

    public async Task OnGetAsync()
    {
        ViewModel = BlogConfig.AppearanceSettings;

        Themes = await Mediator.Send(new GetAllThemeSegmentQuery());
    }
}
